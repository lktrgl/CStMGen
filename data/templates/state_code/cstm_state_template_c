#include <%{state-machine-name}%/state_%{state-name}%.h>

#include <%{state-machine-name}%/state_%{state-machine-name}%_enum.h>
#include <%{state-machine-name}%/state_%{state-machine-name}%_data_desc.h>

#include <CStM/state_default_handler.h>

#include <lggm/dbgprn.h>

#include <stddef.h>
#include <assert.h>

/* ------------------------------------------------------------------------- */

  /* USER GLOBAL DATA AND CODE FOR '%{STATE-NAME}%' BEGIN */

  /* put here global code for 
     the ST_%{STATE-MACHINE-NAME}%_%{STATE-NAME}% state scope */

  %{%{STATE-MACHINE-NAME}%-%{STATE-NAME}%-GLOBAL-DATA-DECLARATION-AND-CODE-DEFINITION}%

  /* USER GLOBAL DATA AND CODE  FOR '%{STATE-NAME}%' END */

/* ------------------------------------------------------------------------- */

static void s_enter_%{state-name}% ( void* data )
{
  LGGM_CALL_IN_C(0);

  %{state-machine-name}%_data_desc_t* d = ( %{state-machine-name}%_data_desc_t* ) data;
  (void)d;

  /* USER HANDLER FOR '%{STATE-NAME}%' 'ENTER' BEGIN */

  /* put here some code to be executed once 
     per each entering the ST_%{STATE-MACHINE-NAME}%_%{STATE-NAME}% state */

  %{%{STATE-MACHINE-NAME}%-%{STATE-NAME}%-ENTER-USER-IMPLEMENTATION}%

  /* USER HANDLER FOR '%{STATE-NAME}%' 'ENTER' END */

  LGGM_CALL_OUT_C(0);
}

/* ------------------------------------------------------------------------- */

static void s_input_%{state-name}% ( void* data )
{
  LGGM_CALL_IN_C(0);

  %{state-machine-name}%_data_desc_t* d = ( %{state-machine-name}%_data_desc_t* ) data;
  (void)d;
  
  /* USER HANDLER FOR '%{STATE-NAME}%' 'INPUT' BEGIN */

  /* put here some code to be executed every time
     before the 'run' handler */

  %{%{STATE-MACHINE-NAME}%-%{STATE-NAME}%-INPUT-USER-IMPLEMENTATION}%

  /* USER HANDLER FOR '%{STATE-NAME}%' 'INPUT' END */

  LGGM_CALL_OUT_C(0);
}

/* ------------------------------------------------------------------------- */

static void s_run_%{state-name}% ( void* data )
{
  LGGM_CALL_IN_C(0);

  %{state-machine-name}%_data_desc_t* d = ( %{state-machine-name}%_data_desc_t* ) data;
  (void)d;

  /* USER HANDLER FOR '%{STATE-NAME}%' 'RUN' BEGIN */

  /* put here some code to be the contents of
     the ST_%{STATE-MACHINE-NAME}%_%{STATE-NAME}% state;
     be aware that the code should not lock the execution
     inside this function  */

  %{%{STATE-MACHINE-NAME}%-%{STATE-NAME}%-RUN-USER-IMPLEMENTATION}%

  /* USER HANDLER FOR '%{STATE-NAME}%' 'RUN' END */

  LGGM_CALL_OUT_C(0);
}

/* ------------------------------------------------------------------------- */

static void s_output_%{state-name}% ( void* data )
{
  LGGM_CALL_IN_C(0);

  %{state-machine-name}%_data_desc_t* d = ( %{state-machine-name}%_data_desc_t* ) data;
  (void)d;

  /* USER HANDLER FOR '%{STATE-NAME}%' 'OUTPUT' BEGIN */

  /* put here some code to be executed every time
     after the 'run' handler */

  %{%{STATE-MACHINE-NAME}%-%{STATE-NAME}%-OUTPUT-USER-IMPLEMENTATION}%

  /* USER HANDLER FOR '%{STATE-NAME}%' 'OUTPUT' END */

  LGGM_CALL_OUT_C(0);
}

/* ------------------------------------------------------------------------- */

static void s_leave_%{state-name}% ( void* data )
{
  LGGM_CALL_IN_C(0);

  %{state-machine-name}%_data_desc_t* d = ( %{state-machine-name}%_data_desc_t* ) data;
  (void)d;
  
  /* USER HANDLER FOR '%{STATE-NAME}%' 'LEAVE' BEGIN */

  /* put here some code to be executed once 
     per each leaving the ST_%{STATE-MACHINE-NAME}%_%{STATE-NAME}% state */

  %{%{STATE-MACHINE-NAME}%-%{STATE-NAME}%-LEAVE-USER-IMPLEMENTATION}%

  /* USER HANDLER FOR '%{STATE-NAME}%' 'LEAVE' END */

  LGGM_CALL_OUT_C(0);
}

/* ------------------------------------------------------------------------- */

static const state_handler_desc_t s_state_handler_%{state-name}% =
{
  .enter = s_enter_%{state-name}%,
  .input = s_input_%{state-name}%,
  .run = s_run_%{state-name}%,
  .output = s_output_%{state-name}%,
  .leave = s_leave_%{state-name}%
};

/* ========================================================================= */

%{state-transitions-definition}%
/* ========================================================================= */

static const state_transition_desc_t* s_state_transitions_%{state-name}%[] =
{
  %{state-transitions-list}%
};

/* ------------------------------------------------------------------------- */

const state_node_desc_t g_state_%{state-machine-name}%_%{state-name}% =
{
  .data = &g_state_data_%{state-machine-name}%,
  .state_index = ST_%{STATE-MACHINE-NAME}%_%{STATE-NAME}%,
  .state_handler = &s_state_handler_%{state-name}%,
  .transitions = s_state_transitions_%{state-name}%,
  .transitions_count = sizeof ( s_state_transitions_%{state-name}% ) / sizeof ( s_state_transitions_%{state-name}%[0] )
};
